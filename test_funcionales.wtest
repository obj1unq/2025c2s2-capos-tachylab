import capos.*

describe "Parte 1 (referencias)" {
    method initialize() {
        rolando.mochila().clear()
    }
    test "1.1 Rolando (testeando la mochila y su capacidad máxima)" {
        rolando.encontrar(espadaDestino)
        rolando.encontrar(libroHechizos)
        assert.equals(#{espadaDestino, libroHechizos}, rolando.mochila())
        rolando.encontrar(collarDivino)
        assert.that(rolando.mochila() == #{espadaDestino, libroHechizos})
        assert.equals(#{espadaDestino, libroHechizos}, rolando.mochila())
    }

    test "1.2 Castillo de piedra (introducción al castillo de piedra como forma de guardar artefactos)" {
        rolando.encontrar(espadaDestino)
        rolando.encontrar(libroHechizos)
        rolando.almacenarEnCasa(espadaDestino)
        rolando.almacenarEnCasa(libroHechizos)
        rolando.encontrar(collarDivino)
        rolando.almacenarEnCasa(collarDivino)
        assert.equals(#{espadaDestino, libroHechizos, collarDivino}, castilloPiedra.almacenamiento())
    }

    test "1.3 Posesiones actuales (unión de posesiones en la mochila y en el castillo de piedra)" {
        rolando.mochila().add(armaduraValyrio)
        castilloPiedra.almacenar(espadaDestino)
        castilloPiedra.almacenar(collarDivino)
        assert.equals(#{armaduraValyrio, espadaDestino, collarDivino}, rolando.posesionesActuales())
        assert.notThat(rolando.posesionesActuales().contains(libroHechizos))
    }

    test "1.4 Conocer la historia de los encuentros de Rolando con los artefactos" {
        rolando.encontrar(espadaDestino)
        rolando.encontrar(libroHechizos)
        rolando.encontrar(collarDivino)
        rolando.almacenarEnCasa(espadaDestino)
        rolando.almacenarEnCasa(libroHechizos)
        rolando.encontrar(armaduraValyrio)
        rolando.encontrar(collarDivino)
        assert.that(rolando.historialEncuentros() == [espadaDestino, libroHechizos, collarDivino, armaduraValyrio, collarDivino])
        assert.equals([espadaDestino, libroHechizos, collarDivino, armaduraValyrio, collarDivino], rolando.historialEncuentros())
}
}
describe "Parte 2 (mensajes con bloques)" {
    method initialize() {
        rolando.mochila().clear()
        rolando.poderBase(5)
        rolando.capacidadMochila(3)
        castilloPiedra.almacenamiento().clear()
    }

    test "2.1 Comportamiento de los artefactos (ejemplo batalla)" {
        rolando.mochila().addAll(#{espadaDestino, armaduraValyrio, collarDivino})
        assert.equals(5, espadaDestino.aportePoder(rolando))
        assert.equals(6, armaduraValyrio.aportePoder(rolando))
        assert.equals(3, collarDivino.aportePoder(rolando))
        rolando.pelearBatalla()
        assert.equals(3, espadaDestino.aportePoder(rolando))
        assert.equals(6, armaduraValyrio.aportePoder(rolando))
        assert.equals(3, collarDivino.aportePoder(rolando))
        rolando.pelearBatalla()
        assert.equals(3.5, espadaDestino.aportePoder(rolando))
        assert.equals(6, armaduraValyrio.aportePoder(rolando))
        assert.equals(5, collarDivino.aportePoder(rolando))
        rolando.pelearBatalla()
        assert.equals(4, espadaDestino.aportePoder(rolando))
        assert.equals(6, armaduraValyrio.aportePoder(rolando))
        assert.equals(6, collarDivino.aportePoder(rolando))
    }

    test "2.1 Comportamiento de los artefactos (ejemplo poder de pelea)" {
        rolando.mochila().addAll(#{espadaDestino, armaduraValyrio, collarDivino})
        assert.equals(19, rolando.poderPeleaTotal())
    }

    test "2.2 Libro de hechizos" {
        rolando.mochila().add(libroHechizos)
        castilloPiedra.almacenamiento().addAll(#{espadaDestino, armaduraValyrio, collarDivino})
        libroHechizos.listaHechizos().addAll([bendicion, invisibilidad, invocacion])
        assert.equals(4, libroHechizos.aportePoder(rolando))
        rolando.pelearBatalla()
        assert.equals(6, libroHechizos.aportePoder(rolando))
        rolando.pelearBatalla()
        assert.equals(7, libroHechizos.aportePoder(rolando))
        rolando.pelearBatalla()
        assert.equals(0, libroHechizos.aportePoder(rolando))
    }

    test "2.3 Enemigos" {
        rolando.mochila().addAll(#{espadaDestino, armaduraValyrio, collarDivino})
        rolando.enemigos().addAll(#{caterina, archibaldo, astra})
        assert.equals(#{archibaldo, astra}, rolando.enemigosDerrotables())
        assert.equals(#{torreMarfil, palacioMarmol}, rolando.moradasConquistables())
        }
    
    test "2.4 Poderoso" {
        rolando.mochila().addAll(#{espadaDestino, armaduraValyrio, collarDivino})
        rolando.enemigos().addAll(#{caterina, archibaldo, astra})
        assert.notThat(rolando.esPoderoso())
        rolando.poderBase(10)
        assert.that(rolando.esPoderoso())
    }

    test "2.5 Artefacto fatal" {
        rolando.mochila().addAll(#{espadaDestino, armaduraValyrio, collarDivino})
        rolando.poderBase(15)
        assert.that(#{rolando.artefactoFatal(astra)}.contains(espadaDestino))
        assert.throwsException({rolando.artefactoFatal(caterina)})
    }
}